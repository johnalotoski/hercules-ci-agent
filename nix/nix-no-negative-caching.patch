diff --git a/src/libstore/store-api.cc b/src/libstore/store-api.cc
index dc54c735..60a37ae1 100644
--- a/src/libstore/store-api.cc
+++ b/src/libstore/store-api.cc
@@ -260,7 +260,9 @@ bool Store::isValidPath(const Path & storePath)
     {
         auto state_(state.lock());
         auto res = state_->pathInfoCache.get(hashPart);
-        if (res) {
+        // TODO: method to clear pathInfoCache negative entries
+        // TODO: reliably retrieve substituter stores
+        if (res && *res != 0) {
             stats.narInfoReadAverted++;
             return *res != 0;
         }
@@ -268,7 +270,7 @@ bool Store::isValidPath(const Path & storePath)
 
     if (diskCache) {
         auto res = diskCache->lookupNarInfo(getUri(), hashPart);
-        if (res.first != NarInfoDiskCache::oUnknown) {
+        if (res.first == NarInfoDiskCache::oValid) {
             stats.narInfoReadAverted++;
             auto state_(state.lock());
             state_->pathInfoCache.upsert(hashPart,
@@ -328,17 +330,15 @@ void Store::queryPathInfo(const Path & storePath,
 
         {
             auto res = state.lock()->pathInfoCache.get(hashPart);
-            if (res) {
+            if (res && *res) {
                 stats.narInfoReadAverted++;
-                if (!*res)
-                    throw InvalidPath(format("path '%s' is not valid") % storePath);
                 return callback(ref<ValidPathInfo>(*res));
             }
         }
 
         if (diskCache) {
             auto res = diskCache->lookupNarInfo(getUri(), hashPart);
-            if (res.first != NarInfoDiskCache::oUnknown) {
+            if (res.first == NarInfoDiskCache::oValid) {
                 stats.narInfoReadAverted++;
                 {
                     auto state_(state.lock());
